import discord
import openai
import asyncio
import logging
from dotenv import load_dotenv
from os import environ as env
from const import conversationSummarySchema
from pathlib import Path
import tempfile
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = discord.Bot()
connections = {}
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI
openai_client = openai.OpenAI(api_key=env.get("OPENAI_API_KEY"))

# –ó–∞–≥—Ä—É–∑–∫–∞ Opus (–¥–ª—è Linux)
try:
    discord.opus.load_opus("/usr/lib/x86_64-linux-gnu/libopus.so.0")
    logger.info("‚úÖ Opus loaded successfully")
except Exception as e:
    logger.warning(f"‚ö†Ô∏è Could not load Opus: {e}")
    # –ü–æ–ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –ø—É—Ç–∏
    try:
        discord.opus.load_opus("/usr/lib/libopus.so.0")
        logger.info("‚úÖ Opus loaded from alternative path")
    except Exception as e2:
        logger.warning(f"‚ö†Ô∏è Could not load Opus from alternative path: {e2}")

@bot.event
async def on_ready():
    """–ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ."""
    logger.info(f"ü§ñ {bot.user} is ready!")
    logger.info(f"üîó Connected to {len(bot.guilds)} guilds")

@bot.slash_command(name="record", description="–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞")
async def record(ctx):
    """–ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞."""
    voice = ctx.author.voice
    
    if not voice:
        await ctx.respond("‚ö†Ô∏è –í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!")
        return
    
    if ctx.guild.id in connections:
        await ctx.respond("‚ö†Ô∏è –ó–∞–ø–∏—Å—å —É–∂–µ –∏–¥–µ—Ç –≤ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ!")
        return
    
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É —Å retry
        max_retries = 3
        for attempt in range(max_retries):
            try:
                vc = await voice.channel.connect()
                connections[ctx.guild.id] = vc
                logger.info(f"‚úÖ Connected to voice channel on attempt {attempt + 1}")
                break
            except Exception as connect_error:
                logger.warning(f"‚ö†Ô∏è Connection attempt {attempt + 1} failed: {connect_error}")
                if attempt == max_retries - 1:
                    raise connect_error
                await asyncio.sleep(2)  # Wait 2 seconds before retry
        
        # –ñ–¥–µ–º —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        await asyncio.sleep(1)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ
        if not vc.is_connected():
            raise Exception("Voice connection not established")
        
        # –ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏ —Å WaveSink
        vc.start_recording(
            discord.sinks.WaveSink(),
            once_done,
            ctx.channel,
        )
        
        await ctx.respond("üî¥ –ó–∞–ø–∏—Å—ã–≤–∞—é —Ä–∞–∑–≥–æ–≤–æ—Ä –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ...")
        logger.info(f"üéôÔ∏è Started recording in {voice.channel.name}")
        
    except Exception as e:
        logger.error(f"‚ùå Error starting recording: {e}")
        await ctx.respond(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∑–∞–ø–∏—Å–∏: {e}")
        # –û—á–∏—â–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if ctx.guild.id in connections:
            del connections[ctx.guild.id]

async def once_done(sink: discord.sinks, channel: discord.TextChannel, *args):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏."""
    try:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        recorded_users = [f"<@{user_id}>" for user_id, audio in sink.audio_data.items()]
        
        # –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        await sink.vc.disconnect()
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –∏–∑ connections
        guild_id = channel.guild.id
        if guild_id in connections:
            del connections[guild_id]
        
        logger.info(f"üìÅ Recorded audio for {len(recorded_users)} users")
        
        if not sink.audio_data:
            await channel.send("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –∞—É–¥–∏–æ")
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        all_transcripts = []
        
        for user_id, audio in sink.audio_data.items():
            try:
                # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                user = bot.get_user(user_id)
                username = user.display_name if user else f"User_{user_id}"
                
                logger.info(f"üéµ Processing audio for {username}")
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞—É–¥–∏–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                with tempfile.NamedTemporaryFile(suffix=".wav", delete=False) as temp_file:
                    temp_file.write(audio.file.read())
                    temp_file_path = temp_file.name
                
                # –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å –ø–æ–º–æ—â—å—é OpenAI Whisper
                with open(temp_file_path, "rb") as audio_file:
                    transcript_response = await openai_client.audio.transcriptions.create(
                        model="whisper-1",
                        file=audio_file,
                        language="ru",  # –†—É—Å—Å–∫–∏–π —è–∑—ã–∫
                        response_format="text"
                    )
                
                transcript_text = transcript_response.strip()
                
                if transcript_text:
                    all_transcripts.append(f"**{username}:** {transcript_text}")
                    logger.info(f"‚úÖ Transcribed {username}: {len(transcript_text)} chars")
                else:
                    logger.warning(f"‚ö†Ô∏è Empty transcript for {username}")
                
                # –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                os.unlink(temp_file_path)
                
            except Exception as e:
                logger.error(f"‚ùå Error processing audio for user {user_id}: {e}")
                continue
        
        if not all_transcripts:
            await channel.send("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é")
            return
        
        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–π
        full_transcript = "\n\n".join(all_transcripts)
        
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        transcript_message = f"üìù **–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –¥–ª—è:** {', '.join(recorded_users)}\n\n{full_transcript}"
        
        # –†–∞–∑–±–∏–≤–∫–∞ –Ω–∞ —á–∞—Å—Ç–∏ –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
        if len(transcript_message) > 2000:
            await channel.send(f"üìù **–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –¥–ª—è:** {', '.join(recorded_users)}")
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –ø–æ —á–∞—Å—Ç—è–º
            for i in range(0, len(full_transcript), 1900):
                chunk = full_transcript[i:i+1900]
                await channel.send(f"```\n{chunk}\n```")
        else:
            await channel.send(transcript_message)
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Å–∞–º–º–∞—Ä–∏ —Å –ø–æ–º–æ—â—å—é GPT
        try:
            logger.info("ü§ñ Creating summary with GPT...")
            
            summary_response = await openai_client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {
                        "role": "system",
                        "content": "–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤. –°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏ –≤—ã–¥–µ–ª–∏ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏ –∑–∞–¥–∞—á–∏. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."
                    },
                    {
                        "role": "user", 
                        "content": f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä –∏ —Å–æ–∑–¥–∞–π —Ä–µ–∑—é–º–µ:\n\n{full_transcript}"
                    }
                ],
                temperature=0.7,
                tools=[{"type": "function", "function": conversationSummarySchema}],
                tool_choice={"type": "function", "function": {"name": "get_conversation_summary"}}
            )
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏
            if summary_response.choices[0].message.tool_calls:
                tool_call = summary_response.choices[0].message.tool_calls[0]
                summary_data = eval(tool_call.function.arguments)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∞–º–º–∞—Ä–∏
                summary_text = "üìã **–†–µ–∑—é–º–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:**\n\n"
                
                if summary_data.get("conversation_summary"):
                    summary_text += "**–ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã:**\n"
                    for point in summary_data["conversation_summary"]:
                        summary_text += f"‚Ä¢ {point}\n"
                    summary_text += "\n"
                
                if summary_data.get("action_items"):
                    summary_text += "**–ó–∞–¥–∞—á–∏ –∏ –¥–µ–π—Å—Ç–≤–∏—è:**\n"
                    for item in summary_data["action_items"]:
                        summary_text += f"‚Ä¢ **{item['task']}**"
                        if item.get("assignees"):
                            summary_text += f" (–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–µ: {', '.join(item['assignees'])})"
                        if item.get("due_date"):
                            summary_text += f" (–°—Ä–æ–∫: {item['due_date']})"
                        summary_text += "\n"
                
                await channel.send(summary_text)
                logger.info("‚úÖ Summary created and sent")
            else:
                # Fallback –µ—Å–ª–∏ –Ω–µ—Ç tool calls
                summary_text = summary_response.choices[0].message.content
                await channel.send(f"üìã **–†–µ–∑—é–º–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:**\n\n{summary_text}")
                logger.info("‚úÖ Summary created and sent (fallback)")
                
        except Exception as e:
            logger.error(f"‚ùå Error creating summary: {e}")
            await channel.send("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ä–µ–∑—é–º–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞")
        
        logger.info("‚úÖ Recording processing completed")
        
    except Exception as e:
        logger.error(f"‚ùå Error in once_done: {e}")
        await channel.send(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø–∏—Å–∏: {e}")

@bot.slash_command(name="stop", description="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å")
async def stop_recording(ctx):
    """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å."""
    if ctx.guild.id in connections:
        vc = connections[ctx.guild.id]
        vc.stop_recording()
        del connections[ctx.guild.id]
        await ctx.respond("üõë –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        logger.info(f"üõë Recording stopped in {ctx.guild.name}")
    else:
        await ctx.respond("üö´ –ó–∞–ø–∏—Å—å –Ω–µ –≤–µ–¥–µ—Ç—Å—è –≤ —ç—Ç–æ–º —Å–µ—Ä–≤–µ—Ä–µ")

@bot.slash_command(name="status", description="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞")
async def status(ctx):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞."""
    guild_count = len(bot.guilds)
    recording_count = len(connections)
    
    status_text = f"ü§ñ **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:**\n"
    status_text += f"‚Ä¢ –°–µ—Ä–≤–µ—Ä–æ–≤: {guild_count}\n"
    status_text += f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π: {recording_count}\n"
    status_text += f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {'üü¢ –û–Ω–ª–∞–π–Ω' if bot.is_ready() else 'üî¥ –û—Ñ–ª–∞–π–Ω'}"
    
    await ctx.respond(status_text)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    token = env.get("DISCORD_TOKEN")
    if not token:
        logger.error("‚ùå DISCORD_TOKEN not found in environment variables")
        exit(1)

    logger.info("üöÄ Starting Discord bot...")
    bot.run(token)